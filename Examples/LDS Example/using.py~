import numpy as np
import sys,os
import gc
from sklearn.multiclass import OutputCodeClassifier,OneVsRestClassifier,OneVsOneClassifier
from sklearn.svm import LinearSVC
from sklearn.neighbors.nearest_centroid import NearestCentroid
import sklearn.svm as svm
gc.collect()
number_of_test_vectors=299
confident_vectors=10
#print sys.argv[1]
def check_accuracy(Y,number,classes):
    correct=0.0
    Y=list(Y)
    print Y
    #print Y[50:100],Y[150:200]
    for i in range(classes):
        for j in range(number):
             if(Y[i*number+j]==i):
                   correct+=1.0
    return correct/len(Y)
def check_accuracy2(Y,number,classes):
    correct=0.0
    Y=list(Y)
    #print Y
    #print Y[50:100],Y[150:200]
    for i in range(classes):
        for j in range(number[i]):
             if(Y[i*number[i-1]+j]==i):
                   correct+=1.0
    return correct/len(Y)
#"amir2.txt" =234
#"Kareena11.txt"=65
#"Kareena12.txt"=15
#"Kareena13.txt"=67
X=[]
X=X+list(np.fromfile("amir2.txt",float,2500*234," "))
#print len(X)
X=X+list(np.fromfile("Kareena11.txt",float,2500*65," "))
X=X+list(np.fromfile("Kareena12.txt",float,2500*15," "))
X=X+list(np.fromfile("Kareena13.txt",float,2500*67," "))
#print len(X)
X=np.array(X)
X=X.reshape(381,2500)
Test_number=int(sys.argv[1])
Pre=np.fromfile("vectors.txt",float,2500*Test_number,"  ")
Y=[0]*234+[1]*147
#print len(X),len(Pre),len(Y)#,Y
Pre=Pre.reshape(Test_number,2500)
#print len(X),len(Pre),len(Y)#,Y
#input()
#X,Y,Pre=np.array(X,object),np.array(Y,object),np.array(Pre,object)
lin_clf = svm.LinearSVC()
lin_clf.fit(X, Y) 
result=lin_clf.predict(Pre)
#print result
number_of_test_vectors=Test_number
#print check_accuracy2(,[234,65],2)*100,'%'

a=lin_clf.decision_function(Pre)
#print a
two_D=[]
for i in range(number_of_test_vectors):
    two_D+=[[a[i],i]]
two_D=sorted(two_D,key=lambda x:x[0])
best_vectors=[]
#f1=open("1.txt","w")#kareena
F1_lis=[]
#f2=open("2.txt","w")
F2_lis=[]
for i in range(confident_vectors):
    best_vectors=[two_D[i]]+best_vectors
    #f1.write(str(two_D[i][1])+"\n")
    F1_lis+=[two_D[i][1]]
    best_vectors=best_vectors+[two_D[-i-1]]
    #f2.write(str(two_D[-i-1][1])+"\n")
    F2_lis+=[two_D[-i-1][1]]
#f1.close()
#f2.close()
f1=open("final_file_train.txt","w")
f2=open("final_file_test.txt","w")
for i in F1_lis:
    for j in Pre[i]:
       f1.write(str(j)+" ")
for i in F2_lis:
    for j in Pre[i]:
       f1.write(str(j)+" ")
F1_lis+=F2_lis
for i in range(len(Pre)):
       # if i not in F1_lis:
       for j in Pre[i]:
        f2.write(str(j)+" ")
f1.close()
f2.close()            
print "\n---------Confident vectors generated--------\n"
#print Test_number," Passed to MAD"
os.system("./a.out")
#print check_accuracy(y_pred,15-Number,classes-1)*100,'%'
#clf = NearestCentroid()
#clf.fit(X, Y)
#print check_accuracy(clf.predict(Pre),total-Number,2)*100,'%'
#clf = OutputCodeClassifier(LinearSVC(random_state=0),code_size=2, random_state=0)
"""print check_accuracy(OneVsRestClassifier(LinearSVC(random_state=0)).fit(X, Y).predict(Pre),15-Number,classes-1)*100,'%'
print check_accuracy(OneVsOneClassifier(LinearSVC(random_state=0)).fit(X, Y).predict(Pre),15-Number,classes-1)*100,'%'"""
#print check_accuracy(clf.fit(X,Y).predict(Pre),100,2)*100,'%'
